/// Generated by the Protocol Buffers 3.6.1 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "IMMessage.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ImmessageRoot {
    public static let `default` = ImmessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class UserInfo : GeneratedMessage {
    public typealias BuilderType = UserInfo.Builder

    public static func == (lhs: UserInfo, rhs: UserInfo) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUserId == rhs.hasUserId) && (!lhs.hasUserId || lhs.userId == rhs.userId)
        fieldCheck = fieldCheck && (lhs.hasUsername == rhs.hasUsername) && (!lhs.hasUsername || lhs.username == rhs.username)
        fieldCheck = fieldCheck && (lhs.hasIconUrl == rhs.hasIconUrl) && (!lhs.hasIconUrl || lhs.iconUrl == rhs.iconUrl)
        fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var userId:Int32! = nil
    public fileprivate(set) var hasUserId:Bool = false

    public fileprivate(set) var username:String! = nil
    public fileprivate(set) var hasUsername:Bool = false

    public fileprivate(set) var iconUrl:String! = nil
    public fileprivate(set) var hasIconUrl:Bool = false

    public fileprivate(set) var level:Int32! = nil
    public fileprivate(set) var hasLevel:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUserId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"userId\" mark required")
        }
        if !hasUsername {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"username\" mark required")
        }
        if !hasIconUrl {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"iconUrl\" mark required")
        }
        if !hasLevel {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"level\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUserId {
            try codedOutputStream.writeInt32(fieldNumber: 1, value:userId)
        }
        if hasUsername {
            try codedOutputStream.writeString(fieldNumber: 2, value:username)
        }
        if hasIconUrl {
            try codedOutputStream.writeString(fieldNumber: 3, value:iconUrl)
        }
        if hasLevel {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:level)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUserId {
            serialize_size += userId.computeInt32Size(fieldNumber: 1)
        }
        if hasUsername {
            serialize_size += username.computeStringSize(fieldNumber: 2)
        }
        if hasIconUrl {
            serialize_size += iconUrl.computeStringSize(fieldNumber: 3)
        }
        if hasLevel {
            serialize_size += level.computeInt32Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> UserInfo.Builder {
        return UserInfo.classBuilder() as! UserInfo.Builder
    }
    public func getBuilder() -> UserInfo.Builder {
        return classBuilder() as! UserInfo.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    public func toBuilder() throws -> UserInfo.Builder {
        return try UserInfo.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:UserInfo) throws -> UserInfo.Builder {
        return try UserInfo.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUserId {
            jsonMap["userID"] = Int(userId)
        }
        if hasUsername {
            jsonMap["username"] = username
        }
        if hasIconUrl {
            jsonMap["iconURL"] = iconUrl
        }
        if hasLevel {
            jsonMap["level"] = Int(level)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserInfo {
        return try UserInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> UserInfo {
        return try UserInfo.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUserId {
            output += "\(indent) userId: \(String(describing: userId)) \n"
        }
        if hasUsername {
            output += "\(indent) username: \(String(describing: username)) \n"
        }
        if hasIconUrl {
            output += "\(indent) iconUrl: \(String(describing: iconUrl)) \n"
        }
        if hasLevel {
            output += "\(indent) level: \(String(describing: level)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUserId {
                hashCode = (hashCode &* 31) &+ userId.hashValue
            }
            if hasUsername {
                hashCode = (hashCode &* 31) &+ username.hashValue
            }
            if hasIconUrl {
                hashCode = (hashCode &* 31) &+ iconUrl.hashValue
            }
            if hasLevel {
                hashCode = (hashCode &* 31) &+ level.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "UserInfo"
    }
    override public func className() -> String {
        return "UserInfo"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:UserInfo = UserInfo()
        public func getMessage() -> UserInfo {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var userId:Int32 {
            get {
                return builderResult.userId
            }
            set (value) {
                builderResult.hasUserId = true
                builderResult.userId = value
            }
        }
        public var hasUserId:Bool {
            get {
                return builderResult.hasUserId
            }
        }
        @discardableResult
        public func setUserId(_ value:Int32) -> UserInfo.Builder {
            self.userId = value
            return self
        }
        @discardableResult
        public func clearUserId() -> UserInfo.Builder{
            builderResult.hasUserId = false
            builderResult.userId = nil
            return self
        }
        public var username:String {
            get {
                return builderResult.username
            }
            set (value) {
                builderResult.hasUsername = true
                builderResult.username = value
            }
        }
        public var hasUsername:Bool {
            get {
                return builderResult.hasUsername
            }
        }
        @discardableResult
        public func setUsername(_ value:String) -> UserInfo.Builder {
            self.username = value
            return self
        }
        @discardableResult
        public func clearUsername() -> UserInfo.Builder{
            builderResult.hasUsername = false
            builderResult.username = nil
            return self
        }
        public var iconUrl:String {
            get {
                return builderResult.iconUrl
            }
            set (value) {
                builderResult.hasIconUrl = true
                builderResult.iconUrl = value
            }
        }
        public var hasIconUrl:Bool {
            get {
                return builderResult.hasIconUrl
            }
        }
        @discardableResult
        public func setIconUrl(_ value:String) -> UserInfo.Builder {
            self.iconUrl = value
            return self
        }
        @discardableResult
        public func clearIconUrl() -> UserInfo.Builder{
            builderResult.hasIconUrl = false
            builderResult.iconUrl = nil
            return self
        }
        public var level:Int32 {
            get {
                return builderResult.level
            }
            set (value) {
                builderResult.hasLevel = true
                builderResult.level = value
            }
        }
        public var hasLevel:Bool {
            get {
                return builderResult.hasLevel
            }
        }
        @discardableResult
        public func setLevel(_ value:Int32) -> UserInfo.Builder {
            self.level = value
            return self
        }
        @discardableResult
        public func clearLevel() -> UserInfo.Builder{
            builderResult.hasLevel = false
            builderResult.level = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> UserInfo.Builder {
            builderResult = UserInfo()
            return self
        }
        override public func clone() throws -> UserInfo.Builder {
            return try UserInfo.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> UserInfo {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> UserInfo {
            let returnMe:UserInfo = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:UserInfo) throws -> UserInfo.Builder {
            if other == UserInfo() {
                return self
            }
            if other.hasUserId {
                userId = other.userId
            }
            if other.hasUsername {
                username = other.username
            }
            if other.hasIconUrl {
                iconUrl = other.iconUrl
            }
            if other.hasLevel {
                level = other.level
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserInfo.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    userId = try codedInputStream.readInt32()

                case 18:
                    username = try codedInputStream.readString()

                case 26:
                    iconUrl = try codedInputStream.readString()

                case 32:
                    level = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserInfo.Builder {
            let resultDecodedBuilder = UserInfo.Builder()
            if let jsonValueUserId = jsonMap["userID"] as? Int {
                resultDecodedBuilder.userId = Int32(jsonValueUserId)
            } else if let jsonValueUserId = jsonMap["userID"] as? String {
                resultDecodedBuilder.userId = Int32(jsonValueUserId)!
            }
            if let jsonValueUsername = jsonMap["username"] as? String {
                resultDecodedBuilder.username = jsonValueUsername
            }
            if let jsonValueIconUrl = jsonMap["iconURL"] as? String {
                resultDecodedBuilder.iconUrl = jsonValueIconUrl
            }
            if let jsonValueLevel = jsonMap["level"] as? Int {
                resultDecodedBuilder.level = Int32(jsonValueLevel)
            } else if let jsonValueLevel = jsonMap["level"] as? String {
                resultDecodedBuilder.level = Int32(jsonValueLevel)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> UserInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try UserInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class ChatMessage : GeneratedMessage {
    public typealias BuilderType = ChatMessage.Builder

    public static func == (lhs: ChatMessage, rhs: ChatMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasMessage == rhs.hasMessage) && (!lhs.hasMessage || lhs.message == rhs.message)
        fieldCheck = fieldCheck && (lhs.hasUserInfo == rhs.hasUserInfo) && (!lhs.hasUserInfo || lhs.userInfo == rhs.userInfo)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var message:String! = nil
    public fileprivate(set) var hasMessage:Bool = false

    public fileprivate(set) var userInfo:UserInfo!
    public fileprivate(set) var hasUserInfo:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasMessage {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ChatMessage.self): field \"message\" mark required")
        }
        if !hasUserInfo {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(ChatMessage.self): field \"userInfo\" mark required")
        }
        try userInfo.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasMessage {
            try codedOutputStream.writeString(fieldNumber: 1, value:message)
        }
        if hasUserInfo {
            try codedOutputStream.writeMessage(fieldNumber: 2, value:userInfo)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasMessage {
            serialize_size += message.computeStringSize(fieldNumber: 1)
        }
        if hasUserInfo {
            if let varSizeuserInfo = userInfo?.computeMessageSize(fieldNumber: 2) {
                serialize_size += varSizeuserInfo
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> ChatMessage.Builder {
        return ChatMessage.classBuilder() as! ChatMessage.Builder
    }
    public func getBuilder() -> ChatMessage.Builder {
        return classBuilder() as! ChatMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ChatMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return ChatMessage.Builder()
    }
    public func toBuilder() throws -> ChatMessage.Builder {
        return try ChatMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:ChatMessage) throws -> ChatMessage.Builder {
        return try ChatMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasMessage {
            jsonMap["message"] = message
        }
        if hasUserInfo {
            jsonMap["userInfo"] = try userInfo.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> ChatMessage {
        return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ChatMessage {
        return try ChatMessage.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasMessage {
            output += "\(indent) message: \(String(describing: message)) \n"
        }
        if hasUserInfo {
            output += "\(indent) userInfo {\n"
            if let outDescUserInfo = userInfo {
                output += try outDescUserInfo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasMessage {
                hashCode = (hashCode &* 31) &+ message.hashValue
            }
            if hasUserInfo {
                if let hashValueuserInfo = userInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuserInfo
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "ChatMessage"
    }
    override public func className() -> String {
        return "ChatMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:ChatMessage = ChatMessage()
        public func getMessage() -> ChatMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var message:String {
            get {
                return builderResult.message
            }
            set (value) {
                builderResult.hasMessage = true
                builderResult.message = value
            }
        }
        public var hasMessage:Bool {
            get {
                return builderResult.hasMessage
            }
        }
        @discardableResult
        public func setMessage(_ value:String) -> ChatMessage.Builder {
            self.message = value
            return self
        }
        @discardableResult
        public func clearMessage() -> ChatMessage.Builder{
            builderResult.hasMessage = false
            builderResult.message = nil
            return self
        }
        public var userInfo:UserInfo! {
            get {
                if userInfoBuilder_ != nil {
                    builderResult.userInfo = userInfoBuilder_.getMessage()
                }
                return builderResult.userInfo
            }
            set (value) {
                builderResult.hasUserInfo = value != nil
                builderResult.userInfo = value
            }
        }
        public var hasUserInfo:Bool {
            get {
                return builderResult.hasUserInfo
            }
        }
        fileprivate var userInfoBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUserInfo = true
            }
        }
        public func getUserInfoBuilder() -> UserInfo.Builder {
            if userInfoBuilder_ == nil {
                userInfoBuilder_ = UserInfo.Builder()
                builderResult.userInfo = userInfoBuilder_.getMessage()
                if userInfo != nil {
                    try! userInfoBuilder_.mergeFrom(other: userInfo)
                }
            }
            return userInfoBuilder_
        }
        @discardableResult
        public func setUserInfo(_ value:UserInfo!) -> ChatMessage.Builder {
            self.userInfo = value
            return self
        }
        @discardableResult
        public func mergeUserInfo(value:UserInfo) throws -> ChatMessage.Builder {
            if builderResult.hasUserInfo {
                builderResult.userInfo = try UserInfo.builderWithPrototype(prototype:builderResult.userInfo).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.userInfo = value
            }
            builderResult.hasUserInfo = true
            return self
        }
        @discardableResult
        public func clearUserInfo() -> ChatMessage.Builder {
            userInfoBuilder_ = nil
            builderResult.hasUserInfo = false
            builderResult.userInfo = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> ChatMessage.Builder {
            builderResult = ChatMessage()
            return self
        }
        override public func clone() throws -> ChatMessage.Builder {
            return try ChatMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> ChatMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> ChatMessage {
            let returnMe:ChatMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:ChatMessage) throws -> ChatMessage.Builder {
            if other == ChatMessage() {
                return self
            }
            if other.hasMessage {
                message = other.message
            }
            if (other.hasUserInfo) {
                try mergeUserInfo(value: other.userInfo)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> ChatMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    message = try codedInputStream.readString()

                case 18:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUserInfo {
                        try subBuilder.mergeFrom(other: userInfo)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    userInfo = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> ChatMessage.Builder {
            let resultDecodedBuilder = ChatMessage.Builder()
            if let jsonValueMessage = jsonMap["message"] as? String {
                resultDecodedBuilder.message = jsonValueMessage
            }
            if let jsonValueUserInfo = jsonMap["userInfo"] as? Dictionary<String,Any> {
                resultDecodedBuilder.userInfo = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUserInfo).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> ChatMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try ChatMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class GiftMessage : GeneratedMessage {
    public typealias BuilderType = GiftMessage.Builder

    public static func == (lhs: GiftMessage, rhs: GiftMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasGiftName == rhs.hasGiftName) && (!lhs.hasGiftName || lhs.giftName == rhs.giftName)
        fieldCheck = fieldCheck && (lhs.hasGiftUrl == rhs.hasGiftUrl) && (!lhs.hasGiftUrl || lhs.giftUrl == rhs.giftUrl)
        fieldCheck = fieldCheck && (lhs.hasGiftId == rhs.hasGiftId) && (!lhs.hasGiftId || lhs.giftId == rhs.giftId)
        fieldCheck = fieldCheck && (lhs.hasGiftCount == rhs.hasGiftCount) && (!lhs.hasGiftCount || lhs.giftCount == rhs.giftCount)
        fieldCheck = fieldCheck && (lhs.hasUserInfo == rhs.hasUserInfo) && (!lhs.hasUserInfo || lhs.userInfo == rhs.userInfo)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var giftName:String! = nil
    public fileprivate(set) var hasGiftName:Bool = false

    public fileprivate(set) var giftUrl:String! = nil
    public fileprivate(set) var hasGiftUrl:Bool = false

    public fileprivate(set) var giftId:String! = nil
    public fileprivate(set) var hasGiftId:Bool = false

    public fileprivate(set) var giftCount:Int32! = nil
    public fileprivate(set) var hasGiftCount:Bool = false

    public fileprivate(set) var userInfo:UserInfo!
    public fileprivate(set) var hasUserInfo:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasGiftName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"giftName\" mark required")
        }
        if !hasGiftUrl {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"giftUrl\" mark required")
        }
        if !hasGiftId {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"giftId\" mark required")
        }
        if !hasGiftCount {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"giftCount\" mark required")
        }
        if !hasUserInfo {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"userInfo\" mark required")
        }
        try userInfo.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasGiftName {
            try codedOutputStream.writeString(fieldNumber: 1, value:giftName)
        }
        if hasGiftUrl {
            try codedOutputStream.writeString(fieldNumber: 2, value:giftUrl)
        }
        if hasGiftId {
            try codedOutputStream.writeString(fieldNumber: 3, value:giftId)
        }
        if hasGiftCount {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:giftCount)
        }
        if hasUserInfo {
            try codedOutputStream.writeMessage(fieldNumber: 5, value:userInfo)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasGiftName {
            serialize_size += giftName.computeStringSize(fieldNumber: 1)
        }
        if hasGiftUrl {
            serialize_size += giftUrl.computeStringSize(fieldNumber: 2)
        }
        if hasGiftId {
            serialize_size += giftId.computeStringSize(fieldNumber: 3)
        }
        if hasGiftCount {
            serialize_size += giftCount.computeInt32Size(fieldNumber: 4)
        }
        if hasUserInfo {
            if let varSizeuserInfo = userInfo?.computeMessageSize(fieldNumber: 5) {
                serialize_size += varSizeuserInfo
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> GiftMessage.Builder {
        return GiftMessage.classBuilder() as! GiftMessage.Builder
    }
    public func getBuilder() -> GiftMessage.Builder {
        return classBuilder() as! GiftMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    public func toBuilder() throws -> GiftMessage.Builder {
        return try GiftMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:GiftMessage) throws -> GiftMessage.Builder {
        return try GiftMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasGiftName {
            jsonMap["giftName"] = giftName
        }
        if hasGiftUrl {
            jsonMap["giftURL"] = giftUrl
        }
        if hasGiftId {
            jsonMap["giftID"] = giftId
        }
        if hasGiftCount {
            jsonMap["giftCount"] = Int(giftCount)
        }
        if hasUserInfo {
            jsonMap["userInfo"] = try userInfo.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> GiftMessage {
        return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> GiftMessage {
        return try GiftMessage.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasGiftName {
            output += "\(indent) giftName: \(String(describing: giftName)) \n"
        }
        if hasGiftUrl {
            output += "\(indent) giftUrl: \(String(describing: giftUrl)) \n"
        }
        if hasGiftId {
            output += "\(indent) giftId: \(String(describing: giftId)) \n"
        }
        if hasGiftCount {
            output += "\(indent) giftCount: \(String(describing: giftCount)) \n"
        }
        if hasUserInfo {
            output += "\(indent) userInfo {\n"
            if let outDescUserInfo = userInfo {
                output += try outDescUserInfo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasGiftName {
                hashCode = (hashCode &* 31) &+ giftName.hashValue
            }
            if hasGiftUrl {
                hashCode = (hashCode &* 31) &+ giftUrl.hashValue
            }
            if hasGiftId {
                hashCode = (hashCode &* 31) &+ giftId.hashValue
            }
            if hasGiftCount {
                hashCode = (hashCode &* 31) &+ giftCount.hashValue
            }
            if hasUserInfo {
                if let hashValueuserInfo = userInfo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuserInfo
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "GiftMessage"
    }
    override public func className() -> String {
        return "GiftMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:GiftMessage = GiftMessage()
        public func getMessage() -> GiftMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var giftName:String {
            get {
                return builderResult.giftName
            }
            set (value) {
                builderResult.hasGiftName = true
                builderResult.giftName = value
            }
        }
        public var hasGiftName:Bool {
            get {
                return builderResult.hasGiftName
            }
        }
        @discardableResult
        public func setGiftName(_ value:String) -> GiftMessage.Builder {
            self.giftName = value
            return self
        }
        @discardableResult
        public func clearGiftName() -> GiftMessage.Builder{
            builderResult.hasGiftName = false
            builderResult.giftName = nil
            return self
        }
        public var giftUrl:String {
            get {
                return builderResult.giftUrl
            }
            set (value) {
                builderResult.hasGiftUrl = true
                builderResult.giftUrl = value
            }
        }
        public var hasGiftUrl:Bool {
            get {
                return builderResult.hasGiftUrl
            }
        }
        @discardableResult
        public func setGiftUrl(_ value:String) -> GiftMessage.Builder {
            self.giftUrl = value
            return self
        }
        @discardableResult
        public func clearGiftUrl() -> GiftMessage.Builder{
            builderResult.hasGiftUrl = false
            builderResult.giftUrl = nil
            return self
        }
        public var giftId:String {
            get {
                return builderResult.giftId
            }
            set (value) {
                builderResult.hasGiftId = true
                builderResult.giftId = value
            }
        }
        public var hasGiftId:Bool {
            get {
                return builderResult.hasGiftId
            }
        }
        @discardableResult
        public func setGiftId(_ value:String) -> GiftMessage.Builder {
            self.giftId = value
            return self
        }
        @discardableResult
        public func clearGiftId() -> GiftMessage.Builder{
            builderResult.hasGiftId = false
            builderResult.giftId = nil
            return self
        }
        public var giftCount:Int32 {
            get {
                return builderResult.giftCount
            }
            set (value) {
                builderResult.hasGiftCount = true
                builderResult.giftCount = value
            }
        }
        public var hasGiftCount:Bool {
            get {
                return builderResult.hasGiftCount
            }
        }
        @discardableResult
        public func setGiftCount(_ value:Int32) -> GiftMessage.Builder {
            self.giftCount = value
            return self
        }
        @discardableResult
        public func clearGiftCount() -> GiftMessage.Builder{
            builderResult.hasGiftCount = false
            builderResult.giftCount = nil
            return self
        }
        public var userInfo:UserInfo! {
            get {
                if userInfoBuilder_ != nil {
                    builderResult.userInfo = userInfoBuilder_.getMessage()
                }
                return builderResult.userInfo
            }
            set (value) {
                builderResult.hasUserInfo = value != nil
                builderResult.userInfo = value
            }
        }
        public var hasUserInfo:Bool {
            get {
                return builderResult.hasUserInfo
            }
        }
        fileprivate var userInfoBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUserInfo = true
            }
        }
        public func getUserInfoBuilder() -> UserInfo.Builder {
            if userInfoBuilder_ == nil {
                userInfoBuilder_ = UserInfo.Builder()
                builderResult.userInfo = userInfoBuilder_.getMessage()
                if userInfo != nil {
                    try! userInfoBuilder_.mergeFrom(other: userInfo)
                }
            }
            return userInfoBuilder_
        }
        @discardableResult
        public func setUserInfo(_ value:UserInfo!) -> GiftMessage.Builder {
            self.userInfo = value
            return self
        }
        @discardableResult
        public func mergeUserInfo(value:UserInfo) throws -> GiftMessage.Builder {
            if builderResult.hasUserInfo {
                builderResult.userInfo = try UserInfo.builderWithPrototype(prototype:builderResult.userInfo).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.userInfo = value
            }
            builderResult.hasUserInfo = true
            return self
        }
        @discardableResult
        public func clearUserInfo() -> GiftMessage.Builder {
            userInfoBuilder_ = nil
            builderResult.hasUserInfo = false
            builderResult.userInfo = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> GiftMessage.Builder {
            builderResult = GiftMessage()
            return self
        }
        override public func clone() throws -> GiftMessage.Builder {
            return try GiftMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> GiftMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> GiftMessage {
            let returnMe:GiftMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:GiftMessage) throws -> GiftMessage.Builder {
            if other == GiftMessage() {
                return self
            }
            if other.hasGiftName {
                giftName = other.giftName
            }
            if other.hasGiftUrl {
                giftUrl = other.giftUrl
            }
            if other.hasGiftId {
                giftId = other.giftId
            }
            if other.hasGiftCount {
                giftCount = other.giftCount
            }
            if (other.hasUserInfo) {
                try mergeUserInfo(value: other.userInfo)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> GiftMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    giftName = try codedInputStream.readString()

                case 18:
                    giftUrl = try codedInputStream.readString()

                case 26:
                    giftId = try codedInputStream.readString()

                case 32:
                    giftCount = try codedInputStream.readInt32()

                case 42:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUserInfo {
                        try subBuilder.mergeFrom(other: userInfo)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    userInfo = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> GiftMessage.Builder {
            let resultDecodedBuilder = GiftMessage.Builder()
            if let jsonValueGiftName = jsonMap["giftName"] as? String {
                resultDecodedBuilder.giftName = jsonValueGiftName
            }
            if let jsonValueGiftUrl = jsonMap["giftURL"] as? String {
                resultDecodedBuilder.giftUrl = jsonValueGiftUrl
            }
            if let jsonValueGiftId = jsonMap["giftID"] as? String {
                resultDecodedBuilder.giftId = jsonValueGiftId
            }
            if let jsonValueGiftCount = jsonMap["giftCount"] as? Int {
                resultDecodedBuilder.giftCount = Int32(jsonValueGiftCount)
            } else if let jsonValueGiftCount = jsonMap["giftCount"] as? String {
                resultDecodedBuilder.giftCount = Int32(jsonValueGiftCount)!
            }
            if let jsonValueUserInfo = jsonMap["userInfo"] as? Dictionary<String,Any> {
                resultDecodedBuilder.userInfo = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUserInfo).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> GiftMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension UserInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserInfo> {
        var mergedArray = Array<UserInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserInfo? {
        return try UserInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "userId": return self.userId
        case "username": return self.username
        case "iconUrl": return self.iconUrl
        case "level": return self.level
        default: return nil
        }
    }
}
extension UserInfo.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = UserInfo
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "userId": return self.userId
            case "username": return self.username
            case "iconUrl": return self.iconUrl
            case "level": return self.level
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "userId":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.userId = newSubscriptValue
            case "username":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.username = newSubscriptValue
            case "iconUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.iconUrl = newSubscriptValue
            case "level":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.level = newSubscriptValue
            default: return
            }
        }
    }
}
extension ChatMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<ChatMessage> {
        var mergedArray = Array<ChatMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> ChatMessage? {
        return try ChatMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> ChatMessage {
        return try ChatMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "message": return self.message
        case "userInfo": return self.userInfo
        default: return nil
        }
    }
}
extension ChatMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = ChatMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "message": return self.message
            case "userInfo": return self.userInfo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "message":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.message = newSubscriptValue
            case "userInfo":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.userInfo = newSubscriptValue
            default: return
            }
        }
    }
}
extension GiftMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<GiftMessage> {
        var mergedArray = Array<GiftMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> GiftMessage? {
        return try GiftMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "giftName": return self.giftName
        case "giftUrl": return self.giftUrl
        case "giftId": return self.giftId
        case "giftCount": return self.giftCount
        case "userInfo": return self.userInfo
        default: return nil
        }
    }
}
extension GiftMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = GiftMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "giftName": return self.giftName
            case "giftUrl": return self.giftUrl
            case "giftId": return self.giftId
            case "giftCount": return self.giftCount
            case "userInfo": return self.userInfo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "giftName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giftName = newSubscriptValue
            case "giftUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giftUrl = newSubscriptValue
            case "giftId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giftId = newSubscriptValue
            case "giftCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.giftCount = newSubscriptValue
            case "userInfo":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.userInfo = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
